{"version":3,"sources":["API/baidu.js","component/cnEnGe.js","component/Page.js","component/Result.js","App.js","serviceWorker.js","index.js"],"names":["axios","require","getUrlQuery","name","reg","RegExp","r","window","location","search","substr","match","unescape","dict","access_token","localStorage","getItem","url","queryMethod","queryHost","apis","auth","data","console","log","get","params","grant_type","client_id","client_secret","then","resp","setItem","ocr","post","headers","dataDes","cnEnGe","image","textDict","setText","json2form","dataZhs","deSpecials","map","line","lineIndex","words","split","word","deSpecial","includes","transform","Dragger","Upload","transformGeneralBasic","result","words_result","forEach","item","push","json","form","URLSearchParams","Object","entries","append","temp","textKey","Page","text","textLanguage","useState","loading","setLoading","beforeUpload","file","reader","FileReader","readAsDataURL","onload","this","images","param","encodeURI","language_type","paragraph","probability","recognize_granularity","detect_direction","api","catch","message","success","listType","multiple","showUploadList","className","InboxOutlined","Option","Select","renderOne","key","handleCopy","range","document","createRange","ele","getElementById","selectNode","selection","getSelection","selectAllChildren","execCommand","languages","value","Result","setTextLanguage","copyRef","React","createRef","defaultValue","onSelect","language","onClick","keys","src","newText","JSON","parse","stringify","handleDeleteOne","ref","id","App","Boolean","hostname","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.0ea103b5.chunk.js","sourcesContent":["const axios = require('axios')\r\n\r\nconst getUrlQuery = (name) => {\r\n     var reg = new RegExp(\"(^|&)\"+ name +\"=([^&]*)(&|$)\")\r\n     var r = window.location.search.substr(1).match(reg)\r\n     if(r!=null)return  unescape(r[2]); return null\r\n}\r\n\r\nlet dict = {\r\n    access_token:  localStorage.getItem(\"access_token\")\r\n    // access_token: null\r\n}\r\n\r\nlet url = 'https://aip.baidubce.com'\r\n\r\nlet queryMethod = getUrlQuery('queryMethod')\r\n// 本地代理\r\nif (queryMethod === 'localhost') {\r\n    let queryHost = getUrlQuery('host') || 7007\r\n    url = 'http://localhost:' + queryHost\r\n} else if (queryMethod === 'dev') {\r\n    url = ''\r\n}\r\n\r\nlet apis = {\r\n    auth (data) {\r\n        console.log('token',dict.access_token)\r\n        if (dict.access_token) return null\r\n        return axios.get(url+'/oauth/2.0/token', {\r\n            params: {\r\n                grant_type: 'client_credentials',\r\n                client_id: 'I9SK2hqWq1sBWZPFPiWElvSc',\r\n                client_secret: 'WqIqxCwKtZRGvYbDa2WD3DAQuAm2O007'\r\n            }\r\n        }).then (resp => {\r\n            dict.access_token =resp.data.access_token\r\n            localStorage.setItem('access_token', resp.data.access_token)\r\n        }) \r\n    },\r\n    ocr (data) {\r\n        // https://ai.baidu.com/ai-doc/OCR/zk3h7xz52\r\n        return axios.post(url+`/rest/2.0/ocr/v1/general_basic?access_token=${dict.access_token}`, \r\n            data\r\n        , {\r\n                headers: {\r\n                   'Content-Type': 'application/x-www-form-urlencoded'\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default apis;","import api from './../API/baidu'\r\nlet dataDes = {\"direction\":0,\"paragraphs_result_num\":3,\"log_id\":6200264271404622000,\"words_result_num\":9,\"words_result\":[{\"words\":\"h zu\"},{\"words\":\"können sie sich vorstellen ?\"},{\"words\":\"siehe e ?\"},{\"words\":\"darf ich mich vorstellen ?\"},{\"words\":\"die er ?\"},{\"words\":\"wie heißen sie ? wie heißt du ?\"},{\"words\":\"entre ? uralte ?\"},{\"words\":\"ich heiße .\"},{\"words\":\"er\"}],\"paragraphs_result\":[{\"words_result_idx\":[0]},{\"words_result_idx\":[1,2,3,4]},{\"words_result_idx\":[5,6,7,8]}]}\r\nlet dataZhs = {\"direction\":0,\"paragraphs_result_num\":9,\"log_id\":6988648770111479000,\"words_result_num\":9,\"words_result\":[{\"words\":\"自我介绍\"},{\"words\":\"Konnen Sie sich vorstellen?\"},{\"words\":\"■您能介绍一下自己吗?\"},{\"words\":\"Darf ich mich vorstellen?\"},{\"words\":\"我能自我介绍一下吗?\"},{\"words\":\"Wie heiBen Sie? Wie heiSt du?\"},{\"words\":\"您叫什么?你叫什么?\"},{\"words\":\"Ich heiBe\"},{\"words\":\"我叫\"}],\"paragraphs_result\":[{\"words_result_idx\":[0]},{\"words_result_idx\":[1]},{\"words_result_idx\":[2]},{\"words_result_idx\":[3]},{\"words_result_idx\":[4]},{\"words_result_idx\":[5]},{\"words_result_idx\":[6]},{\"words_result_idx\":[7]},{\"words_result_idx\":[8]}]}\r\n\r\n \r\nfunction transform(dataDes, dataZhs) {\r\n    const updateDeWords = (lineIndex, words) => {\r\n        dataZhs[lineIndex].words = dataZhs[lineIndex].words\r\n    }\r\n\r\n    let deSpecials = ['ü', 'Ü', 'Ö', 'ö', 'Ä', 'ä', 'ß']\r\n    dataDes.map((line, lineIndex) => {\r\n        let lines = line.words.split(' ')\r\n        lines.map(word => {\r\n            deSpecials.map(deSpecial => {\r\n                if (word.includes(deSpecial)) {\r\n                    console.log(3333)\r\n                }\r\n            })\r\n            \r\n        })\r\n    })\r\n}\r\n\r\nfunction cnEnGe (image, textDict, setText, json2form) {\r\n    transform(dataDes.words_result,dataZhs.words_result)\r\n    return\r\n\r\n    let zhParam = {\r\n       image: encodeURI(image),\r\n       language_type: 'ZH_EN',\r\n       paragraph: 'true',\r\n       probability: 'false',\r\n       recognize_granularity: 'big',\r\n       detect_direction: 'true',\r\n    }\r\n    let geParam = {\r\n        image: encodeURI(image),\r\n       language_type: 'DE',\r\n       paragraph: 'true',\r\n       probability: 'false',\r\n       recognize_granularity: 'big',\r\n       detect_direction: 'true',\r\n    }\r\n    Promise.all(\r\n        [api.ocr(json2form(zhParam)),\r\n         api.ocr(geParam)]           \r\n    ).then(resp => {\r\n        console.log(json2form(3333))\r\n        console.log(resp)\r\n    }).catch(resp => {\r\n        console.log('error')\r\n    })\r\n}\r\nexport default  cnEnGe","import React, { useState } from 'react';\r\nimport api from './../API/baidu'\r\n// eslint-disable-next-line no-unused-vars\r\nimport { Upload, message } from 'antd';\r\nimport { InboxOutlined } from '@ant-design/icons';\r\nimport cnEnGe from './cnEnGe';\r\nconst { Dragger } = Upload\r\n\r\n// import { PlusOutlined } from '@ant-design/icons';\r\n\r\nlet data = {\"direction\":0,\"paragraphs_result_num\":3,\"log_id\":6200264271404622000,\"words_result_num\":9,\"words_result\":[{\"words\":\"h zu\"},{\"words\":\"können sie sich vorstellen ?\"},{\"words\":\"siehe e ?\"},{\"words\":\"darf ich mich vorstellen ?\"},{\"words\":\"die er ?\"},{\"words\":\"wie heißen sie ? wie heißt du ?\"},{\"words\":\"entre ? uralte ?\"},{\"words\":\"ich heiße .\"},{\"words\":\"er\"}],\"paragraphs_result\":[{\"words_result_idx\":[0]},{\"words_result_idx\":[1,2,3,4]},{\"words_result_idx\":[5,6,7,8]}]}\r\nconst transformGeneralBasic = (data) => {\r\n  let result = []\r\n  let words = data.words_result\r\n  words.forEach(item => {\r\n    result.push(item.words)\r\n  })\r\n  return result\r\n}\r\n\r\nconst json2form = json => {\r\n  let form =  new URLSearchParams()\r\n  Object.entries(json).forEach(item => {\r\n    form.append(item[0], item[1])\r\n  })\r\n  return form\r\n}\r\n\r\nlet temp = 0\r\nlet textKey = 0\r\nlet textDict = {}\r\nfunction Page(text, setText, textLanguage) {\r\n  textDict.text = text\r\n  const [loading, setLoading] = useState(false)\r\n\r\n  // 启用mock数据\r\n  if (temp < 0) {\r\n    textKey = textKey + 1\r\n    setText({\r\n      ...text,\r\n      [textKey]: {\r\n        words: transformGeneralBasic(data),\r\n        image: '33333'\r\n      }\r\n    })\r\n    temp = temp + 1\r\n  }\r\n  \r\n  const upload = (file) => {\r\n   \r\n    setLoading(true)\r\n    var reader=new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = function () {\r\n      let image = this.result\r\n      let images = image.split(',')\r\n\r\n      if (textLanguage === 'CHN_ENG_DE') {\r\n        cnEnGe(images[1], textDict, setText, json2form)\r\n        return\r\n      }\r\n\r\n      let param = {\r\n       image: encodeURI(images[1]),\r\n       language_type: textLanguage,\r\n       paragraph: 'true',\r\n       probability: 'false',\r\n       recognize_granularity: 'big',\r\n       detect_direction: 'true',\r\n      }\r\n      \r\n      let result = json2form(param)\r\n      api.ocr(result).then(resp => {\r\n        setLoading(false)\r\n        textKey = textKey + 1\r\n       \r\n          setText({\r\n            ...textDict.text,\r\n            [textKey]: {\r\n              words: transformGeneralBasic(resp.data),\r\n              image\r\n            }\r\n          })\r\n        \r\n      }).catch(resp => {\r\n        setLoading(true)\r\n        message.success('发生错误，请重试');\r\n      })\r\n    }\r\n    \r\n    return false\r\n  }\r\n\r\n  return (\r\n    <div>\r\n        <Dragger\r\n          name= \"image\"\r\n          beforeUpload= {upload}\r\n          listType=\"picture-card\"\r\n          multiple= {true}\r\n          showUploadList = {false}\r\n        >\r\n          <p className=\"ant-upload-drag-icon\">\r\n            <InboxOutlined />\r\n          </p>\r\n          <p className=\"ant-upload-text\">\r\n            {loading ? '上传中，请稍后...' : '单击或拖拽上传图片'}</p>\r\n        \r\n        </Dragger>\r\n    </div>\r\n  );\r\n}\r\n// beforeUpload = {() => false}\r\nexport default Page;\r\n","import React from 'react';\r\nimport './result.css'\r\nimport { Button,  Select} from 'antd';\r\nimport cnEnGe from './cnEnGe';\r\nconst { Option} = Select;\r\n\r\nlet renderOne = (words) => {\r\n    return (\r\n        words.map(item => (\r\n            <p className = \"result-one-text\" key = {item}>{item}</p>\r\n        ))\r\n    )\r\n}\r\nconst handleCopy = () => {\r\n    let range = document.createRange()\r\n    let ele = document.getElementById(\"result-text\");\r\n    // console.log(copyDome)\r\n    range.selectNode(ele)\r\n    let selection = window.getSelection();\r\n    selection.selectAllChildren(ele);\r\n    console.log(selection)\r\n\r\n    // console.log(range)\r\n\r\n    // // range.selectNodeContents(copyDome)\r\n\r\n    // // copyDome.select(); // 选择对象\r\n    document.execCommand(\"Copy\"); \r\n    \r\n}\r\n\r\nconst languages = [\r\n    {value: 'CHN_ENG', text: '中英'},\r\n    {value: 'CHN_ENG_GE', text: '中英德'},\r\n    {value: 'ENG', text: '英'},\r\n    {value: 'JAP', text: '日'},\r\n    {value: 'KOR', text: '韩'},\r\n    {value: 'FRE', text: '法'},\r\n    {value: 'SPA', text: '西班牙'},\r\n    {value: 'POR', text: '葡萄牙'},\r\n    {value: 'GER', text: '德'},\r\n    {value: 'ITA', text: '意大利'},\r\n    {value: 'RUS', text: '俄'},\r\n]\r\n\r\nfunction Result(text, setText, textLanguage, setTextLanguage) {  \r\n // if (Object.keys(text).length === 0) return null\r\n // cnEnGe()\r\n  let copyRef = React.createRef()\r\n  const clearText = () => {\r\n    setText({})\r\n    }\r\n  const handleDeleteOne = (key) => {\r\n    let newText = JSON.parse(JSON.stringify(text))\r\n    delete newText[key]\r\n    setText(newText)\r\n  }  \r\n  const handleLanguage = (value) => {\r\n      setTextLanguage(value)\r\n  }\r\n\r\n  return (\r\n    <div >\r\n        <div className=\"result-action\">\r\n            <Select defaultValue ='中英' \r\n                className=\"action-btn\"\r\n                onSelect={handleLanguage}>\r\n               {\r\n                   languages.map(language => (\r\n                       <Option value={language.value} key={language.value}>\r\n                           {language.text}\r\n                       </Option>\r\n                   ))\r\n               } \r\n            </Select>\r\n            <Button onClick = {handleCopy} className=\"action-btn\">全选复制</Button>\r\n            <Button onClick = {clearText} className=\"action-btn\">清空</Button>\r\n        </div>\r\n        <div className =\"result-box\">\r\n            <div className =\"result-image\">\r\n            {\r\n                Object.keys(text).map(key => (\r\n                    <div key = {key}  className = \"result-image-one\">\r\n                        <div className = \"result-one result-one-transparent\">\r\n                            {renderOne(text[key].words)}\r\n                        </div>\r\n                        <div className = \"result-one-image\">\r\n                            <img src = {text[key].image} />\r\n                        </div>\r\n                        <div className = \"result-one-delete\" onClick={()=> {handleDeleteOne(key)}}>\r\n                            X\r\n                        </div>\r\n                    </div>\r\n                ))\r\n                    \r\n            }    \r\n            </div>\r\n            <div className =\"resut-text\" \r\n                ref={copyRef}\r\n                id=\"result-text\">\r\n            {\r\n                Object.keys(text).map(key => (\r\n                    <div key = {key} \r\n                        className = \"result-one\"\r\n                    >{renderOne(text[key].words)}</div>\r\n                ))\r\n            }\r\n            </div>\r\n        </div>\r\n    </div>\r\n    \r\n  );\r\n}\r\n\r\nexport default Result;","import React, { useState } from 'react';\nimport './App.css';\nimport api from './API/baidu'\nimport Page from './component/Page'\nimport Result from './component/Result'\nimport 'antd/dist/antd.css';\n\n\nconst auth = () => {\n  api.auth()\n}\n\n\nfunction App() {\n  auth()\n  \n  const [text, setText] = useState({})\n  const [textLanguage, setTextLanguage] = useState('CH_ENG')\n\n  return (\n    <div>\n      {Page(text, setText, textLanguage)}\n      {Result(text, setText, textLanguage, setTextLanguage)}\n    </div>\n  );\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}