{"version":3,"sources":["API/baidu.js","component/Page.js","component/Result.js","App.js","serviceWorker.js","index.js"],"names":["url","axios","require","dict","access_token","apis","auth","data","get","params","grant_type","client_id","client_secret","then","resp","window","ocr","post","headers","Dragger","Upload","transformGeneralBasic","result","words_result","forEach","item","push","words","temp","Page","text","setText","useState","loading","setLoading","textKey","Object","keys","length","toString","image","name","beforeUpload","file","reader","FileReader","readAsDataURL","onload","this","images","split","json","form","URLSearchParams","entries","console","log","append","json2form","encodeURI","language_type","paragraph","recognize_granularity","detect_direction","vertexes_location","api","catch","message","success","listType","multiple","showUploadList","className","InboxOutlined","renderOne","map","key","handleCopy","range","document","createRange","ele","getElementById","selectNode","selection","getSelection","selectAllChildren","execCommand","Result","copyRef","React","createRef","onClick","src","newText","JSON","parse","stringify","handleDeleteOne","ref","id","App","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.e5977e95.chunk.js","sourcesContent":["const axios = require('axios')\r\n\r\nlet dict = {\r\n    access_token: null\r\n}\r\nlet url = ''\r\nurl = 'http://localhost:3009'\r\nurl = 'https://aip.baidubce.com'\r\nlet apis = {\r\n    auth (data) {\r\n        return axios.get(url+'/oauth/2.0/token', {\r\n            params: {\r\n                grant_type: 'client_credentials',\r\n                client_id: 'I9SK2hqWq1sBWZPFPiWElvSc',\r\n                client_secret: 'WqIqxCwKtZRGvYbDa2WD3DAQuAm2O007'\r\n            }\r\n        }).then (resp => {\r\n            dict.access_token =resp.data.access_token\r\n            window.dict = dict\r\n        }) \r\n    },\r\n    ocr (data) {\r\n        return axios.post(url+`/rest/2.0/ocr/v1/general_basic?access_token=${dict.access_token}`, \r\n            data\r\n        , {\r\n                headers: {\r\n                   'Content-Type': 'application/x-www-form-urlencoded'\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default apis;","import React, { useState } from 'react';\r\nimport api from './../API/baidu'\r\n// eslint-disable-next-line no-unused-vars\r\nimport { Upload, Modal,message } from 'antd';\r\nimport { InboxOutlined } from '@ant-design/icons';\r\nconst { Dragger } = Upload\r\n\r\n// import { PlusOutlined } from '@ant-design/icons';\r\n\r\nlet data = {\"direction\":0,\"paragraphs_result_num\":3,\"log_id\":6200264271404622000,\"words_result_num\":9,\"words_result\":[{\"words\":\"h zu\"},{\"words\":\"können sie sich vorstellen ?\"},{\"words\":\"siehe e ?\"},{\"words\":\"darf ich mich vorstellen ?\"},{\"words\":\"die er ?\"},{\"words\":\"wie heißen sie ? wie heißt du ?\"},{\"words\":\"entre ? uralte ?\"},{\"words\":\"ich heiße .\"},{\"words\":\"er\"}],\"paragraphs_result\":[{\"words_result_idx\":[0]},{\"words_result_idx\":[1,2,3,4]},{\"words_result_idx\":[5,6,7,8]}]}\r\nconst transformGeneralBasic = (data) => {\r\n  let result = []\r\n  let words = data.words_result\r\n  words.forEach(item => {\r\n    result.push(item.words)\r\n  })\r\n  return result\r\n}\r\n\r\nconst json2form = json => {\r\n  let form =  new URLSearchParams()\r\n  Object.entries(json).forEach(item => {\r\n    console.log(item)\r\n    form.append(item[0], item[1])\r\n  })\r\n  return form\r\n}\r\n\r\nlet temp = 0\r\nfunction Page(text, setText) {\r\n  const [loading, setLoading] = useState(false)\r\n  let t = transformGeneralBasic(data, 'ddd')\r\n  let textKey = Object.keys(text).length.toString()\r\n  if (temp < 0) {\r\n    setText({\r\n      ...text,\r\n      [textKey]: {\r\n        words: transformGeneralBasic(data),\r\n        image: '33333'\r\n      }\r\n    })\r\n    temp = temp + 1\r\n  }\r\n  \r\n  const upload = (file) => {\r\n    setLoading(true)\r\n    var reader=new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = function () {\r\n      let image = this.result\r\n      let images = image.split(',')\r\n      let param = {\r\n       image: encodeURI(images[1]),\r\n       language_type: 'GER',\r\n       paragraph: true,\r\n       recognize_granularity: 'big',\r\n       detect_direction: true,\r\n       vertexes_location: false\r\n      }\r\n      \r\n      let result = json2form(param)\r\n      api.ocr(result).then(resp => {\r\n        setLoading(false)\r\n        setText({\r\n          ...text,\r\n          [textKey]: {\r\n            words: transformGeneralBasic(data),\r\n            image\r\n          }\r\n        })\r\n      }).catch(resp => {\r\n        setLoading(true)\r\n        message.success('发生错误，请重试');\r\n      })\r\n    }\r\n    \r\n    return false\r\n  }\r\n\r\n  return (\r\n    <div>\r\n        <Dragger\r\n          name= \"image\"\r\n          beforeUpload= {upload}\r\n          listType=\"picture-card\"\r\n          multiple= {true}\r\n          showUploadList = {false}\r\n        >\r\n          <p className=\"ant-upload-drag-icon\">\r\n            <InboxOutlined />\r\n          </p>\r\n          <p className=\"ant-upload-text\">\r\n            {loading ? '上传中，请稍后...' : '单击或拖拽上传图片'}</p>\r\n        \r\n        </Dragger>\r\n    </div>\r\n  );\r\n}\r\n// beforeUpload = {() => false}\r\nexport default Page;\r\n","import React from 'react';\r\nimport './result.css'\r\nimport { Button } from 'antd';\r\n\r\nlet renderOne = (words) => {\r\n    return (\r\n        words.map(item => (\r\n            <p className = \"result-one-text\" key = {item}>{item}</p>\r\n        ))\r\n    )\r\n}\r\nconst handleCopy = () => {\r\n    let range = document.createRange()\r\n    let ele = document.getElementById(\"result-text\");\r\n    // console.log(copyDome)\r\n    range.selectNode(ele)\r\n    let selection = window.getSelection();\r\n    selection.selectAllChildren(ele);\r\n    console.log(selection)\r\n\r\n    // console.log(range)\r\n\r\n    // // range.selectNodeContents(copyDome)\r\n\r\n    // // copyDome.select(); // 选择对象\r\n    document.execCommand(\"Copy\"); \r\n    \r\n}\r\n\r\nfunction Result(text, setText) {  \r\n  if (Object.keys(text).length === 0) return null\r\n  let copyRef = React.createRef()\r\n  const clearText = () => {\r\n    setText({})\r\n    }\r\n  const handleDeleteOne = (key) => {\r\n      let newText = JSON.parse(JSON.stringify(text))\r\n    delete newText[key]\r\n    console.log(111, newText)\r\n    setText(newText)\r\n  }  \r\n\r\n  return (\r\n    <div >\r\n        <div className=\"result-action\">\r\n            <Button onClick = {handleCopy} className=\"action-btn\">复制</Button>\r\n            <Button onClick = {clearText} className=\"action-btn\">清空</Button>\r\n        </div>\r\n        <div className =\"result-box\">\r\n            <div className =\"result-image\">\r\n            {\r\n                Object.keys(text).map(key => (\r\n                    <div key = {key}  className = \"result-image-one\">\r\n                        <div className = \"result-one result-one-transparent\">\r\n                            {renderOne(text[key].words)}\r\n                        </div>\r\n                        <div className = \"result-one-image\">\r\n                            <img src = {text[key].image} />\r\n                        </div>\r\n                        <div className = \"result-one-delete\" onClick={()=> {handleDeleteOne(key)}}>\r\n                            X\r\n                        </div>\r\n                    </div>\r\n                ))\r\n                    \r\n            }    \r\n            </div>\r\n            <div className =\"resut-text\" \r\n                ref={copyRef}\r\n                id=\"result-text\">\r\n            {\r\n                Object.keys(text).map(key => (\r\n                    <div key = {key} \r\n                        className = \"result-one\"\r\n                    >{renderOne(text[key].words)}</div>\r\n                ))\r\n            }\r\n            </div>\r\n        </div>\r\n    </div>\r\n    \r\n  );\r\n}\r\n\r\nexport default Result;","import React, { useState } from 'react';\nimport './App.css';\nimport api from './API/baidu'\nimport Page from './component/Page'\nimport Result from './component/Result'\nimport 'antd/dist/antd.css';\n\nconst auth = () => {\n  api.auth().then(resp => {\n    console.log(resp)\n  })\n}\n\nfunction App() {\n  auth()\n  const [text, setText] = useState({})\n\n  return (\n    <div>\n      {Page(text, setText)}\n      {Result(text, setText)}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}