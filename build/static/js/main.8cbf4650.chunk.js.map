{"version":3,"sources":["component/cnEnGe.js","API/baidu.js","component/Page.js","component/Result.js","App.js","serviceWorker.js","index.js"],"names":["transform","dataZhs","dataDes","deSpecials","map","line","lineIndex","lines","words","split","word","deSpecial","specialAt","indexOf","wordFront","slice","wordBack","r","replace","eval","item","cnEnGe","image","json2form","Promise","resolve","reject","zhParam","encodeURI","language_type","paragraph","probability","recognize_granularity","detect_direction","geParam","all","api","ocr","then","resp","result","data","words_result","catch","axios","require","getUrlQuery","name","reg","RegExp","window","location","search","substr","match","unescape","dict","access_token","localStorage","getItem","url","queryMethod","queryHost","apis","auth","console","log","get","params","grant_type","client_id","client_secret","setItem","message","error","post","headers","Dragger","Upload","transformGeneralBasic","forEach","push","json","form","URLSearchParams","Object","entries","append","temp","textKey","textDict","hasCopyEvent","Page","text","setText","textLanguage","useState","loading","setLoading","updateText","upload","file","reader","FileReader","readAsDataURL","onload","this","images","param","addEventListener","e","items","clipboardData","kind","getAsFile","beforeUpload","listType","multiple","showUploadList","className","InboxOutlined","Option","Select","renderOne","key","handleCopy","range","document","createRange","ele","getElementById","selectNode","getSelection","selectAllChildren","execCommand","languages","value","Result","setTextLanguage","defaultLanguage","some","defaultValue","onSelect","language","onClick","keys","length","src","alt","newText","JSON","parse","stringify","handleDeleteOne","suppressContentEditableWarning","contentEditable","id","App","languageType","title","subTitle","extra","target","href","Boolean","hostname","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8cbf4650.chunk.js","sourcesContent":["import api from './../API/baidu'\r\n\r\n// 测试用数据\r\n// let dataDes = {\"direction\":0,\"paragraphs_result_num\":3,\"log_id\":6200264271404622000,\"words_result_num\":9,\"words_result\":[{\"words\":\"h zu\"},{\"words\":\"können sie sich vorstellen ?\"},{\"words\":\"siehe e ?\"},{\"words\":\"darf ich mich vorstellen ?\"},{\"words\":\"die er ?\"},{\"words\":\"wie heißen sie ? wie heißt du ?\"},{\"words\":\"entre ? uralte ?\"},{\"words\":\"ich heiße .\"},{\"words\":\"er\"}],\"paragraphs_result\":[{\"words_result_idx\":[0]},{\"words_result_idx\":[1,2,3,4]},{\"words_result_idx\":[5,6,7,8]}]}\r\n// let dataZhs = {\"direction\":0,\"paragraphs_result_num\":9,\"log_id\":6988648770111479000,\"words_result_num\":9,\"words_result\":[{\"words\":\"自我介绍\"},{\"words\":\"Konnen Sie sich vorstellen?\"},{\"words\":\"■您能介绍一下自己吗?\"},{\"words\":\"Darf ich mich vorstellen?\"},{\"words\":\"我能自我介绍一下吗?\"},{\"words\":\"Wie heiBen Sie? Wie heiSt du?\"},{\"words\":\"您叫什么?你叫什么?\"},{\"words\":\"Ich heiBe\"},{\"words\":\"我叫\"}],\"paragraphs_result\":[{\"words_result_idx\":[0]},{\"words_result_idx\":[1]},{\"words_result_idx\":[2]},{\"words_result_idx\":[3]},{\"words_result_idx\":[4]},{\"words_result_idx\":[5]},{\"words_result_idx\":[6]},{\"words_result_idx\":[7]},{\"words_result_idx\":[8]}]}\r\n\r\n// 合并德语和英语\r\n// 1. 找出德语特殊字母； 2. 找出德语特殊字母所在的单词； 3. 用正则替换英语中相应单词 \r\n// dataZhs: 中英文； dataDes： 德文\r\nfunction transform(dataZhs, dataDes) {\r\n    let deSpecials = ['ü', 'Ü', 'Ö', 'ö', 'Ä', 'ä', 'ß']\r\n    // 一张图片\r\n    dataDes.map((line, lineIndex) => {\r\n        // 一句化\r\n        let lines = line.words.split(' ')\r\n        // 一个单词\r\n        lines.map(word => {\r\n            deSpecials.map(deSpecial => {\r\n                let specialAt = word.indexOf(deSpecial)\r\n                if (specialAt > 0) {\r\n                    // 正则，如 'auc'.replace(/a*c/i, 'ü')\r\n                    let wordFront = word.slice(0, specialAt)\r\n                    let wordBack = word.slice(specialAt+1)\r\n                    let r = `/${wordFront}.${wordBack}/i`\r\n                   \r\n                    dataZhs[lineIndex].words =  dataZhs[lineIndex].words.replace(eval(r), word)\r\n                    \r\n                }\r\n            })\r\n            \r\n        })\r\n    })\r\n    return dataZhs.map(item => item.words)\r\n}\r\n\r\nfunction cnEnGe (image, json2form) {\r\n    // 测试数据使用\r\n    // transform(dataDes.words_result,dataZhs.words_result)\r\n    return new Promise((resolve, reject) => {\r\n        let zhParam = {\r\n            image: encodeURI(image),\r\n            language_type: 'ZH_EN',\r\n            paragraph: 'true',\r\n            probability: 'false',\r\n            recognize_granularity: 'big',\r\n            detect_direction: 'true',\r\n         }\r\n         let geParam = {\r\n             image: encodeURI(image),\r\n            language_type: 'GER',\r\n            paragraph: 'true',\r\n            probability: 'false',\r\n            recognize_granularity: 'big',\r\n            detect_direction: 'true',\r\n         }\r\n         Promise.all(\r\n             [api.ocr(json2form(zhParam)),\r\n              api.ocr(json2form(geParam))]           \r\n         ).then(resp => {\r\n             let result = transform(resp[0].data.words_result, resp[1].data.words_result)\r\n             resolve(result)             \r\n         }).catch(resp => {\r\n             reject()\r\n         })\r\n    })\r\n    \r\n}\r\nexport default  cnEnGe","import { message } from 'antd'\r\nconst axios = require('axios')\r\n\r\nconst getUrlQuery = (name) => {\r\n     var reg = new RegExp(\"(^|&)\"+ name +\"=([^&]*)(&|$)\")\r\n     var r = window.location.search.substr(1).match(reg)\r\n     if(r!=null)return  unescape(r[2]); return null\r\n}\r\n\r\nlet dict = {\r\n    access_token:  localStorage.getItem(\"access_token\")\r\n    // access_token: null\r\n}\r\n\r\nlet url = 'https://aip.baidubce.com'\r\n\r\nlet queryMethod = getUrlQuery('method')\r\n// 本地代理\r\nif (queryMethod === 'localhost') {\r\n    let queryHost = getUrlQuery('host') || 7007\r\n    url = 'http://localhost:' + queryHost\r\n} else if (queryMethod === 'dev') {\r\n    url = ''\r\n}\r\n\r\nlet apis = {\r\n    auth (data) {\r\n        console.log('token',dict.access_token)\r\n        if (dict.access_token) return null\r\n        return axios.get(url+'/oauth/2.0/token', {\r\n            params: {\r\n                grant_type: 'client_credentials',\r\n                client_id: 'I9SK2hqWq1sBWZPFPiWElvSc',\r\n                client_secret: 'WqIqxCwKtZRGvYbDa2WD3DAQuAm2O007'\r\n            }\r\n        }).then (resp => {\r\n            dict.access_token =resp.data.access_token\r\n            localStorage.setItem('access_token', resp.data.access_token)\r\n        }).catch(resp => {\r\n            message.error('错误，无法连接网络，可能是代理服务未开启');\r\n        }) \r\n    },\r\n    ocr (data) {\r\n        // https://ai.baidu.com/ai-doc/OCR/zk3h7xz52\r\n        return axios.post(url+`/rest/2.0/ocr/v1/general_basic?access_token=${dict.access_token}`, \r\n            data\r\n        , {\r\n                headers: {\r\n                   'Content-Type': 'application/x-www-form-urlencoded'\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default apis;","import React, { useState } from 'react';\r\nimport api from './../API/baidu'\r\n\r\nimport { Upload, message } from 'antd';\r\nimport { InboxOutlined } from '@ant-design/icons';\r\nimport cnEnGe from './cnEnGe';\r\nconst { Dragger } = Upload\r\n\r\n// 测试数据： 中英\r\nlet data = {\"direction\":0,\"paragraphs_result_num\":3,\"log_id\":6200264271404622000,\"words_result_num\":9,\"words_result\":[{\"words\":\"h zu\"},{\"words\":\"können sie sich vorstellen ?\"},{\"words\":\"siehe e ?\"},{\"words\":\"darf ich mich vorstellen ?\"},{\"words\":\"die er ?\"},{\"words\":\"wie heißen sie ? wie heißt du ?\"},{\"words\":\"entre ? uralte ?\"},{\"words\":\"ich heiße .\"},{\"words\":\"er\"}],\"paragraphs_result\":[{\"words_result_idx\":[0]},{\"words_result_idx\":[1,2,3,4]},{\"words_result_idx\":[5,6,7,8]}]}\r\n\r\nconst transformGeneralBasic = (data) => {\r\n  let result = []\r\n  let words = data.words_result\r\n  words.forEach(item => {\r\n    result.push(item.words)\r\n  })\r\n  return result\r\n}\r\n\r\nconst json2form = json => {\r\n  let form =  new URLSearchParams()\r\n  Object.entries(json).forEach(item => {\r\n    form.append(item[0], item[1])\r\n  })\r\n  return form\r\n}\r\n\r\nlet temp = 0 // 测试数据用\r\nlet textKey = 0 // 每张图的键\r\nlet textDict = {} // 所有以识别的文本，用对象是防止函数重选失去值\r\nlet hasCopyEvent = false // 是否已经copy\r\n\r\nfunction Page(text, setText, textLanguage) {\r\n  textDict.text = text\r\n\r\n  const [loading, setLoading] = useState(false)\r\n\r\n  // 更新text\r\n  const updateText =  (text, image) => {\r\n    setLoading(false)\r\n    textKey = textKey + 1 \r\n    setText({\r\n      ...textDict.text,\r\n      [textKey]: {\r\n        words: text,\r\n        image\r\n      }\r\n    })\r\n  }\r\n\r\n  \r\n  // 启用mock数据\r\n  if (temp < 0) {\r\n    textKey = textKey + 1\r\n    setText({\r\n      ...text,\r\n      [textKey]: {\r\n        words: transformGeneralBasic(data),\r\n        image: '33333'\r\n      }\r\n    })\r\n    temp = temp + 1\r\n  }\r\n  \r\n  // 上传操作\r\n  const upload = (file) => {\r\n    setLoading(true)\r\n    let reader=new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = function () {\r\n    let image = this.result\r\n    let images = image.split(',')\r\n    console.log(images)\r\n    if (textLanguage === 'CHN_GER') {\r\n      cnEnGe(images[1], json2form).then(result => {\r\n        updateText(\r\n          result,\r\n          images)\r\n        setLoading(false)  \r\n      }).catch(()=> {\r\n        setLoading(false)\r\n        message.error('发生错误，请重试');\r\n      })\r\n      return\r\n    }\r\n\r\n\r\n    // 普通语言上传\r\n    let param = {\r\n      image: encodeURI(images[1]),\r\n      language_type: textLanguage,\r\n      paragraph: 'true',\r\n      probability: 'false',\r\n      recognize_granularity: 'big',\r\n      detect_direction: 'true',\r\n    }    \r\n    let result = json2form(param)\r\n    api.ocr(result).then(resp => {\r\n      updateText(\r\n        transformGeneralBasic(resp.data),\r\n        image)\r\n    }).catch(() => {\r\n      setLoading(true)\r\n      message.error('发生错误，请重试')\r\n    })\r\n    }\r\n    \r\n    return false\r\n  }\r\n\r\n  // 从粘贴板中上传\r\n  if (!hasCopyEvent) {\r\n    window.addEventListener(\"paste\", function (e){\r\n      if (loading) return\r\n      setLoading(false)\r\n      let items = e.clipboardData.items\r\n        for (let item of items) {\r\n            if (item.kind === 'file') {\r\n              upload(item.getAsFile())\r\n            }\r\n          }\r\n    })\r\n    hasCopyEvent = true\r\n  }\r\n  \r\n\r\n  return (\r\n    <div>\r\n        <Dragger\r\n          name= \"image\"\r\n          beforeUpload= {upload}\r\n          listType=\"picture-card\"\r\n          multiple= {true}\r\n          showUploadList = {false}\r\n        >\r\n          <p className=\"ant-upload-drag-icon\">\r\n            <InboxOutlined />\r\n          </p>\r\n          <p className=\"ant-upload-text\">\r\n            {loading ? '上传中，请稍后...' : '单击或拖拽上传图片'}\r\n          </p>\r\n          <p>\r\n            或按 Ctrl/Commend + V 从粘贴板上上传\r\n          </p>\r\n        </Dragger>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Page;\r\n","import React from 'react';\r\nimport './result.css'\r\nimport { Button,  Select} from 'antd';\r\n// import cnEnGe from './cnEnGe';\r\nconst { Option} = Select;\r\n\r\nlet renderOne = (words) => {\r\n    return (\r\n        words.map(item => (\r\n            <p className = \"result-one-text\" key = {item}>{item}</p>\r\n        ))\r\n    )\r\n}\r\nconst handleCopy = () => {\r\n    let range = document.createRange()\r\n    let ele = document.getElementById(\"result-text\");\r\n    range.selectNode(ele)\r\n    let selection = window.getSelection();\r\n    selection.selectAllChildren(ele);\r\n    document.execCommand(\"Copy\"); \r\n    \r\n}\r\n\r\nconst languages = [\r\n    {value: 'CHN_ENG', text: '中英'},\r\n    {value: 'CHN_GER', text: '中德'},\r\n    {value: 'GER', text: '德'},\r\n    {value: 'ENG', text: '英'},\r\n    {value: 'JAP', text: '日'},\r\n    {value: 'KOR', text: '韩'},\r\n    {value: 'FRE', text: '法'},\r\n    {value: 'SPA', text: '西班牙'},\r\n    {value: 'POR', text: '葡萄牙'},\r\n    {value: 'ITA', text: '意大利'},\r\n    {value: 'RUS', text: '俄'},\r\n]\r\n\r\nfunction Result(text, setText, textLanguage, setTextLanguage) {  \r\n \r\n  const clearText = () => {\r\n    setText({})\r\n    }\r\n  const handleDeleteOne = (key) => {\r\n    let newText = JSON.parse(JSON.stringify(text))\r\n    delete newText[key]\r\n    setText(newText)\r\n  }  \r\n  const handleLanguage = (value) => {\r\n      setTextLanguage(value)\r\n      localStorage.setItem('language_type', value)\r\n  }\r\n\r\n  let defaultLanguage = \"中英\"\r\n  languages.some(item => {\r\n      if (item.value === textLanguage) {\r\n        defaultLanguage = item.text\r\n        return true\r\n      }\r\n  })\r\n\r\n  return (\r\n    <div >\r\n        <div className=\"result-action\">\r\n            <Select\r\n                defaultValue={defaultLanguage}\r\n                className=\"action-btn\"\r\n                onSelect={handleLanguage}>\r\n               {\r\n                   languages.map(language => (\r\n                       <Option value={language.value} key={language.value}>\r\n                           {language.text}\r\n                       </Option>\r\n                   ))\r\n               } \r\n            </Select>\r\n            <Button onClick = {handleCopy} className=\"action-btn\">全选复制</Button>\r\n            <Button onClick = {clearText} className=\"action-btn\">清空</Button>\r\n        </div>\r\n        <div className =\"result-box\">\r\n            <div className =\"result-image\">\r\n            {\r\n                Object.keys(text).length > 0 && Object.keys(text).map(key => (\r\n                    <div key = {key}  className = \"result-image-one\">\r\n                        <div className = \"result-one resulxt-one-transparent\">\r\n                            {renderOne(text[key].words)}\r\n                        </div>\r\n                        <div className = \"result-one-image\">\r\n                            <img src = {text[key].image} \r\n                                alt= '上传的图像'\r\n                                className=\"result-one-img\"/>\r\n                        </div>\r\n                        <div className = \"result-one-delete\" \r\n                                    onClick={()=> {handleDeleteOne(key)}}>\r\n                            <span>❌</span>\r\n                        </div>\r\n                    </div>\r\n                ))\r\n                    \r\n            }    \r\n            </div>\r\n            <div className =\"resut-text\" \r\n                suppressContentEditableWarning={true}\r\n                contentEditable={true}\r\n                id=\"result-text\">\r\n            {\r\n                 Object.keys(text).length > 0 && Object.keys(text).map(key => (\r\n                    <div key = {key} \r\n                    \r\n                        className = \"result-one\"\r\n                    >{renderOne(text[key].words)}</div>\r\n                ))\r\n            }\r\n            </div>\r\n        </div>\r\n    </div>\r\n    \r\n  );\r\n}\r\n\r\nexport default Result;","import React, { useState } from 'react';\nimport './App.css';\nimport api from './API/baidu'\nimport Page from './component/Page'\nimport Result from './component/Result'\nimport 'antd/dist/antd.css';\nimport { PageHeader } from 'antd';\n\nconst auth = () => {\n  api.auth()\n}\n\n\nfunction App() {\n  auth()\n  \n  const [text, setText] = useState({})\n  let languageType = localStorage.getItem(\"language_type\") || 'CH_ENG'\n  const [textLanguage, setTextLanguage] = useState(languageType)\n\n  return (\n    <div>\n       <PageHeader\n        title=\"🎈CC文字识别\"\n        subTitle=\"\"\n        extra={[\n          <a target='_bank' href='https://github.com/seaasun/text-identify' key=\"1\">❤GitHub</a> \n        ]}\n      />\n      {Page(text, setText, textLanguage)}\n      {Result(text, setText, textLanguage, setTextLanguage)}\n    </div>\n  );\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}